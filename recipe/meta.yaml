{% set cudnn_version= "8.9.2.26" %}
{% set build_number= "0" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]


package:
  name: cudnn
  version: {{ cudnn_version }}

source:
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ cudnn_version }}_cuda{{ cuda_maj_version }}-archive.{{ extension }}
  sha256: 39883d1bcab4bd2bf3dac5a2172b38533c1e777e45e35813100059e5091406f6  # [linux64 and (cuda_maj_version == 11)]
  sha256: ccafd7d15c2bf26187d52d79d9ccf95104f4199980f5075a7c1ee3347948ce32  # [linux64 and (cuda_maj_version == 12)]
  sha256: ad0a45a7992fe165fef3c8be5eef4080ebad19a2334c29dfb01d605776927293  # [aarch64 and (cuda_maj_version == 11)]
  sha256: 898d00c82f9ad8797bd6f6c639327b320a38fa4aeebfb2b3fbb2db0d38f7e1b0  # [aarch64 and (cuda_maj_version == 12)]
  sha256: d3daa2297917333857eaaba1213dd9fc05c099d94e88663274a0f37a4e9baf9d  # [win and (cuda_maj_version == 11)]
  sha256: 8cf26fec7362d7fac110df9986a579e932a7e1ae693a11e3fa77cca41ae4d8b9  # [win and (cuda_maj_version == 12)]

build:
  skip: True  # [osx or (linux and s390x)]
  number: {{ build_number }}
  string: cuda{{ cuda_maj_version }}_{{ build_number }}
  missing_dso_whitelist:
    - '*'
  run_exports:
    - {{ pin_subpackage('cudnn', min_pin='x.x', max_pin='x') }}

requirements:
  run:
    - cudatoolkit {{ cuda_maj_version }}.*   # [cuda_maj_version == 11]
    - cuda-version {{ cuda_maj_version }}.*
    - cuda-nvrtc                             # [cuda_maj_version == 12]
    - libcublas                              # [cuda_maj_version == 12]
    # libcudnn_cnn_infer.so needs libm.so.6 with ABI v2.27
    - __glibc >=2.27                         # [linux and aarch64]

test:
  requires:
    - {{ compiler('c') }}                                                                                        # [linux and x86_64]
  files:
    - test_load_elf.c                                                                                            # [linux and x86_64]
  commands:
    - if not exist %LIBRARY_INC%\\cudnn.h exit 1                                                                 # [win]
    - if not exist %LIBRARY_INC%\\cudnn_adv_train.h exit 1                                                       # [win]
    - if not exist %LIBRARY_BIN%\\cudnn64_{{ '.'.join(cudnn_version.split('.')[0:1]) }}.dll exit 1               # [win]
    - if not exist %LIBRARY_BIN%\\cudnn_adv_train64_{{ '.'.join(cudnn_version.split('.')[0:1]) }}.dll exit 1     # [win]
    - test -f ${PREFIX}/include/cudnn.h                                                                          # [linux and x86_64]
    - test -f ${PREFIX}/include/cudnn_adv_train.h                                                                # [linux and x86_64]
    - test -f ${PREFIX}/lib/libcudnn.so                                                                          # [linux and x86_64]
    - test -f ${PREFIX}/lib/libcudnn_adv_train.so                                                                # [linux and x86_64]
    - test -f ${PREFIX}/lib/libcudnn.so.{{ '.'.join(cudnn_version.split('.')[0:1]) }}                            # [linux and x86_64]
    - test -f ${PREFIX}/lib/libcudnn.so.{{ '.'.join(cudnn_version.split('.')[0:3]) }}                            # [linux and x86_64]
    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf                                              # [linux and x86_64]
    - for f in ${PREFIX}/lib/libcudnn*.so; do ./test_load_elf $f; done                                           # [linux and x86_64]

about:
  home: https://developer.nvidia.com/cudnn
  license_file: LICENSE
  license_family: PROPRIETARY
  license: Proprietary
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    The NVIDIA CUDAÂ® Deep Neural Network library (cuDNN) is a GPU-accelerated library of primitives for deep neural
    networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward
    convolution, pooling, normalization, and activation layers.
  doc_url: https://docs.nvidia.com/deeplearning/cudnn
  dev_url: https://developer.nvidia.com/rdp/cudnn-download
